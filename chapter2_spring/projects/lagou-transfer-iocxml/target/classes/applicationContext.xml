<?xml version="1.0" encoding="UTF-8" ?>
<!--spring xml文件头-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">
    <!--根标签beans,里面配置一个又一个子标签,每一个子标签bean都是一个类的配置-->
    <!--  class:全限定类名 id:标识对象 -->
    <!--  scope:定义bean的作用范围
                singleton:单例,IOC容器只有一个对象 默认
                prototype:原型(多例),每次getBean都是新对象

      -->
    <bean id="accountDao" class="com.lagou.edu.dao.impl.JdbcAccountDaoImpl"
          init-method="init" destroy-method="destroy">
        <!--    set注入使用property标签.如果注入的是另外一个bean,使用ref.如果是普通值,使用value    -->
        <!--        <property name="connectionUtils" ref="connectionUtils"/>-->
        <!--        <property name="name" value="张三"/>-->
        <!--        <property name="sex" value="1"/>-->
        <!--        <property name="money" value="100.3"/>-->
        <!--    索引位置注入    -->
        <!--        <constructor-arg index="0" ref="connectionUtils"/>-->
        <!--        <constructor-arg index="1" value="zhangsan"/>-->
        <!--        <constructor-arg index="2" value="1"/>-->
        <!--        <constructor-arg index="3" value="100.5"/>-->
        <!--    参数名注入    -->
        <constructor-arg name="connectionUtils" ref="connectionUtils"/>
        <constructor-arg name="name" value="zhangsan"/>
        <constructor-arg name="sex" value="1"/>
        <constructor-arg name="money" value="100.5"/>

        <!--    set注入复杂数据类型    -->
        <property name="myArray">
            <array>
                <value>array1</value>
                <value>array2</value>
                <value>array3</value>
            </array>
        </property>
        <property name="myMap">
            <map>
                <entry key="key1" value="value1"/>
                <entry key="key2" value="value2"/>
                <entry key="key3" value="value3"/>
            </map>
        </property>
        <property name="mySet">
            <set>
                <value>set1</value>
                <value>set2</value>
            </set>
        </property>
        <property name="myProperties">
            <props>
                <prop key="prop1">value1</prop>
                <prop key="prop2">value2</prop>
            </props>
        </property>
    </bean>
    <bean id="transferService" class="com.lagou.edu.service.impl.TransferServiceImpl">
        <!--set+ name 之后锁定到传值的set方法了，通过反射技术可以调用该方法传入对应的值-->
        <property name="AccountDao" ref="accountDao">
        </property>
    </bean>
    <!--  配置新增的三个Bean  -->
    <!--    <bean id="connectionUtils" class="com.lagou.edu.utils.ConnectionUtils">-->

    <!--    </bean>-->
    <!--  事务管理器  -->
    <bean id="transactionManager" class="com.lagou.edu.utils.TransactionManager">
        <property name="connectionUtils" ref="connectionUtils"></property>
    </bean>
    <!--  代理工厂对象  -->
    <bean id="proxyFactory" class="com.lagou.edu.factory.ProxyFactory">
        <property name="transactionManager" ref="transactionManager">
        </property>
    </bean>

    <!--  springIOC实例化bean的三种方式  -->
    <!--  1:使用无参构造(推荐)  -->
    <!--    <bean id="connectionUtils" class="com.lagou.edu.utils.ConnectionUtils"/>-->

    <!--  另外两种方式:为了让new的对象加入springIOC容器管理中  -->
    <!-- 方式二:静态方法 -->
    <!--    <bean id="connectionUtils" class="com.lagou.edu.factory.CreateBeanFactory" factory-method="getInstanceStatic"/>-->
    <!--  方式三:实例化方法  -->
    <bean id="createBeanFactory" class="com.lagou.edu.factory.CreateBeanFactory"/>
    <bean id="connectionUtils" factory-bean="createBeanFactory" factory-method="getInstance"></bean>

</beans>